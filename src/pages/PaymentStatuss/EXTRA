import React, { Component } from "react";
import PropTypes from "prop-types";
import { connect } from "react-redux";
import Select from "react-select";
import MetaTags from "react-meta-tags";
import { withRouter, Link } from "react-router-dom";
import {
  Card,
  CardBody,
  CardImg,
  Col,
  Container,
  Row,
  Modal,
  Button,
  ModalHeader,
  ModalBody,
  FormGroup,
  CardTitle,
  Label,
  Input,
} from "reactstrap";

import paginationFactory, {
  PaginationProvider,
  PaginationListStandalone,
} from "react-bootstrap-table2-paginator";

import ToolkitProvider, { Search } from "react-bootstrap-table2-toolkit";
import BootstrapTable from "react-bootstrap-table-next";

import { Formik, Field, Form, ErrorMessage } from "formik";
import * as Yup from "yup";

import images from "assets/images";

//Import Breadcrumb
import Breadcrumbs from "components/Common/Breadcrumb";
import DeleteModal from "components/Common/DeleteModal";

// import {
//   addNewOutPayment,
// } from "store/outpayments/actions";
import {
  getLabs,
  getBankAccounts,

  addNewOutPayment,
  getCreatedOutStatuss,
  updatePaymentOutCreatedStatuss,
} from "store/payment-statuss/actions";

import { isEmpty, size } from "lodash";
import "assets/scss/table.scss";

class paymentCreatedList extends Component {
  constructor(props) {
    super(props);
    this.node = React.createRef();
    this.state = {
      paymentCreatedStatuss: [],
      paymentCreatedStatus: "",
      modal: false,
      deleteModal: false,
      user_id: localStorage.getItem("authUser")
        ? JSON.parse(localStorage.getItem("authUser")).user_id
        : "",
      paymentCreatedStatusListColumns: [
        {
          text: "id",
          dataField: "id",
          sort: true,
          hidden: false,
          formatter: (cellContent, paymentCreatedStatus) => (
            <>{paymentCreatedStatus.id}</>
          ),
        },
        {
          dataField: "invoice_id",
          text: "invoice ID",
          sort: true,
          hidden: true,
          formatter: (cellContent, paymentCreatedStatus) => (
            <>
              <strong>{paymentCreatedStatus.invoice_id}</strong>
            </>
          ),
        },
        {
          dataField: "payment_method",
          text: "Payment Method",
          sort: true,
        },
        {
          dataField: "payment_for",
          text: "Payment To",
          sort: true,
        },
        {
          dataField: "lab_name",
          text: "Lab Name",
          sort: true,
        },
        {
          dataField: "b2b_id",
          text: "B2b Name",
          sort: true,
        },
        {
          dataField: "payment_at",
          text: "Payment Date",
          sort: true,
        },
        {
          dataField: "cheque_no",
          text: "Cheque/Online Ref#",
          sort: true,
        },
        {
          dataField: "amount",
          text: "Amount",
          sort: true,
        },
        {
          dataField: "bank",
          text: "Bank/Account#",
          sort: true,
          formatter: (cellContent, paymentCreatedStatus) => (
            <>
              <span>
                <span>
                  {paymentCreatedStatus.bank_name},{" "}
                  {paymentCreatedStatus.account_no}
                </span>
              </span>
            </>
          ),
        },
        {
          dataField: "status",
          text: "Status",
          sort: true,
        },
        {
          dataField: "menu",
          isDummyField: true,
          editable: false,
          text: "Action",
          formatter: (cellContent, paymentCreatedStatus) => (
            <div className="d-flex gap-3">
              <Link className="text-success" to="#">
                <i
                  className="mdi mdi-pencil font-size-18"
                  id="edittooltip"
                  onClick={e =>
                    this.handlePaymentStatusClick(e, paymentCreatedStatus)
                  }
                ></i>
              </Link>

            </div>
          ),
        },
      ],
    };
    this.handlePaymentStatusClick =
      this.handlePaymentStatusClick.bind(this);
    this.toggle = this.toggle.bind(this);
    this.handlePaymentStatusClicks =
      this.handlePaymentStatusClicks.bind(this);
  }
  // The code for converting "image source" (url) to "Base64"
  // toDataURL = url =>
  //   fetch(url)
  //     .then(response => response.blob())
  //     .then(
  //       blob =>
  //         new Promise((resolve, reject) => {
  //           const reader = new FileReader();
  //           reader.onloadend = () => resolve(reader.deposit_slip);
  //           reader.onerror = reject;
  //           reader.readAsDataURL(blob);
  //         })
  //     );

  // // The code for converting "Base64" to javascript "File Object"
  // dataURLtoFile = (dataurl, filename) => {
  //   var arr = dataurl.split(","),
  //     mime = arr[0].match(/:(.*?);/)[1],
  //     bstr = atob(arr[1]),
  //     n = bstr.length,
  //     u8arr = new Uint8Array(n);
  //   while (n--) {
  //     u8arr[n] = bstr.charCodeAt(n);
  //   }
  //   return new File([u8arr], filename, { type: mime });
  // };
  componentDidMount() {
    const { labs, onGetlabs } = this.props;
    if (labs && !labs.length) {
      onGetlabs();
    }
    this.setState({ labs });

    const { bankAccounts, onGetbankAccounts } = this.props;
    if (bankAccounts && !bankAccounts.length) {
      onGetbankAccounts();
    }
    this.setState({ bankAccounts });


    const { paymentCreatedStatuss, onGetCreatedOutStatuss } = this.props;
    onGetCreatedOutStatuss(this.state.user_id);
    this.setState({ paymentCreatedStatuss });
  }

  toggle() {
    this.setState(prevState => ({
      modal: !prevState.modal,
    }));
  }

  handlePaymentStatusClicks = () => {
    this.setState({
      paymentCreatedStatus: "",
      deposit_slip: "",
      isEdit: false,
    });
    this.toggle();
  };

  // eslint-disable-next-line no-unused-vars
  componentDidUpdate(prevProps, prevState, snapshot) {

    const { paymentCreatedStatuss } = this.props;
    if (
      !isEmpty(paymentCreatedStatuss) &&
      size(prevProps.paymentCreatedStatuss) !== size(paymentCreatedStatuss)
    ) {
      this.setState({ paymentCreatedStatuss: {}, isEdit: false });
    }
  }

  onPaginationPageChange = page => {
    if (
      this.node &&
      this.node.current &&
      this.node.current.props &&
      this.node.current.props.pagination &&
      this.node.current.props.pagination.options
    ) {
      this.node.current.props.pagination.options.onPageChange(page);
    }
  };

  /* Insert,Update Delete data */

  toggleDeleteModal = () => {
    this.setState(prevState => ({
      deleteModal: !prevState.deleteModal,
    }));
  };
  handleProceedClicks = () => {
    this.setState({
      outPayment: {
        payment_for: this.state.payment_for,
        lab_id: this.state.lab_id,
        b2b_id: this.state.b2b_id,
        bank_id: this.state.bank_id,
        bankaccount_id: this.state.bankaccount_id,
        amount: this.state.amount,
        payment_method: this.state.payment_method,
        payment_at: this.state.payment_at,
        cheque_no: this.state.cheque_no,
        deposit_copy: this.state.deposit_copy,
        is_cleared: this.state.is_cleared,
        status: "Pending Clearance",
        comments: this.state.comments,
      },
    });

    // API call to get the checkout items
    const { onAddNewOutPayment } = this.props;
    setTimeout(() => {
      console.log(
        onAddNewOutPayment(this.state.outPayment, this.state.user_id)
      );
    }, 2000);

    // setTimeout(() => {
    // this.setState({ outPayment: this.props.outPayment });

    // // If checkout operation is successful.
    // if (this.props.outPayment) {
    // this.props.history.push("/donor-appointment");
    // }
    // }, 2000);
    // }
  };
  //   handlePaymentStatusClick = (e, arg) => {
  //   this.setState({
  //     paymentCreatedStatus: {
  //       id: arg.id,
  //       // payment_for: this.state.payment_for,
  //       // lab_id: this.state.lab_id,
  //       // b2b_id: this.state.b2b_id,
  //       // bank_id: this.state.bank_id,
  //       // bankaccount_id: this.state.bankaccount_id,
  //       amount: arg.amount,
  //       payment_method: this.state.payment_method,
  //       payment_at: this.state.payment_at,
  //       cheque_no: this.state.cheque_no,
  //       deposit_copy: this.state.deposit_copy,
  //       // is_cleared: this.state.is_cleared,
  //       status: this.state.status,
  //       comments: this.state.comments,
  //     },
  //     isEdit: true,
  //   });

  //   this.toggle();
  // };

  handlePaymentStatusClick = (e, arg) => {
    this.setState({
      paymentCreatedStatus: {
        id: arg.id,
        // payment_for: this.state.payment_for,
        // lab_id: this.state.lab_id,
        // b2b_id: this.state.b2b_id,
        // bank_id: this.state.bank_id,
        // bankaccount_id: this.state.bankaccount_id,
        amount: arg.amount,
        payment_method: this.state.payment_method,
        payment_at: this.state.payment_at,
        cheque_no: this.state.cheque_no,
        deposit_copy: this.state.deposit_copy,
        // is_cleared: this.state.is_cleared,
        status: this.state.status,
        comments: this.state.comments,
      },
      isEdit: true,
    });

    this.toggle();
  };

  render() {
    const { SearchBar } = Search;
    const { labs } = this.props;

    const { paymentCreatedStatuss } = this.props;

    const { isEdit, deleteModal } = this.state;

    const {
      onAddNewOutPayment,
      onUpdatePaymentOutCreatedStatuss,
      onGetCreatedOutStatuss,
    } = this.props;
    const paymentCreatedStatus = this.state.paymentCreatedStatus;

    const pageOptions = {
      sizePerPage: 10,
      totalSize: 100, // replace later with size(paymentCreatedStatuss),
      custom: true,
    };

    const defaultSorted = [
      {
        dataField: "id", // if dataField is not match to any column you defined, it will be ignored.
        order: "desc", // desc or asc
      },
    ];
    const labList = [];
    for (let i = 0; i < labs.length; i++) {
      let flag = 0;
      // for (let j = 0; j < outPayments.length; j++) {
      //   if (labs[i].id == outPayments[j].lab_id) {
      //     flag = 1;
      //   }
      // }
      if (!flag) {
        labList.push({
          label: labs[i].name,
          value: labs[i].id,
        });
      }
    }

    const { bankAccounts } = this.props;
    const bankaccountList = [];
    for (let i = 0; i < bankAccounts.length; i++) {
      let flag = 0;
      // for (let j = 0; j < bankAccounts.length; j++) {
      //   if (banks[i].id == bankAccounts[j].bank_id) {
      //     flag = 1;
      //   }
      // }
      if (!flag) {
        bankaccountList.push({
          label: bankAccounts[i].account_no,
          value: bankAccounts[i].id,
        });
      }
    }

    return (
      <React.Fragment>
        <div className="page-content">
          <MetaTags>
            <title>Payments In with Status | Lab Hazir</title>
          </MetaTags>
          <Container fluid>
            {/* Render Breadcrumbs */}
            <Breadcrumbs
              title="Payments In"
              breadcrumbItem="Status List"
            />
            <Row>
              <Col lg="12">
                <Card>
                  <CardBody>
                    <PaginationProvider
                      pagination={paginationFactory(pageOptions)}
                      keyField="id"
                      columns={this.state.paymentCreatedStatusListColumns}
                      data={paymentCreatedStatuss}
                    >
                      {({ paginationProps, paginationTableProps }) => (
                        <ToolkitProvider
                          keyField="id"
                          columns={this.state.paymentCreatedStatusListColumns}
                          data={paymentCreatedStatuss}
                          search
                        >
                          {toolkitprops => (
                            <React.Fragment>
                              <Row className="mb-2">
                                <Col sm="4">
                                  <div className="search-box ms-2 mb-2 d-inline-block">
                                    <div className="position-relative">
                                      <SearchBar
                                        {...toolkitprops.searchProps}
                                      />
                                      <i className="bx bx-search-alt search-icon" />
                                    </div>
                                  </div>
                                </Col>
                              </Row>
                              <Row className="mb-4">
                                <Col xl="12">
                                  <div className="table-responsive">
                                    <BootstrapTable
                                      {...toolkitprops.baseProps}
                                      {...paginationTableProps}
                                      defaultSorted={defaultSorted}
                                      classes={"table align-middle table-hover"}
                                      bordered={false}
                                      striped={true}
                                      headerWrapperClasses={"table-light"}
                                      responsive
                                      ref={this.node}
                                    />

                                    <Modal
                                      isOpen={this.state.modal}
                                      className={this.props.className}
                                    >
                                      <ModalHeader
                                        toggle={this.toggle}
                                        tag="h4"
                                      >
                                        {!!isEdit
                                          ? "Edit MOF"
                                          : "Add Quality Certificate"}
                                      </ModalHeader>
                                      <ModalBody>
                                        <Formik
                                          enableReinitialize={true}
                                          initialValues={{
                                            hiddenEditFlag: isEdit,

                                            deposit_copy:
                                              (this.state.paymentCreatedStatus &&
                                                this.state.paymentCreatedStatus
                                                  .deposit_copy) ||
                                              "",
                                            amount:
                                              (this.state.paymentCreatedStatus &&
                                                this.state.paymentCreatedStatus
                                                  .amount) ||
                                              "",
                                            payment_method:
                                              (this.state.paymentCreatedStatus &&
                                                this.state.paymentCreatedStatus
                                                  .payment_method) ||
                                              "",
                                            payment_at: (this.state.paymentCreatedStatus && this.state.paymentCreatedStatus.payment_at) || "",


                                            cheque_no:
                                              (this.state.paymentCreatedStatus &&
                                                this.state.paymentCreatedStatus
                                                  .cheque_no) ||
                                              "",
                                            comments:
                                              (this.state.paymentCreatedStatus &&
                                                this.state.paymentCreatedStatus
                                                  .comments) ||
                                              "",
                                          }}
                                          validationSchema={Yup.object().shape({
                                            hiddentEditFlag: Yup.boolean(),

                                            //   deposit_slip: Yup.string().required(
                                            //   "Please upload the file of payment slip"
                                            // ),


                                            deposit_slip: Yup.string().when(
                                              "hiddenEditFlag",
                                              {
                                                is: hiddenEditFlag =>
                                                  hiddenEditFlag == false, //just an e.g. you can return a function
                                                then: Yup.string().required(
                                                  "Please upload Payment Slip"
                                                ),
                                              }
                                            ),
                                            // Validation for logo based on type value
                                            // type: Yup.string(),
                                            // logo: Yup.mixed().test(
                                            //   "required",
                                            //   "Please upload logo",
                                            // ),


                                          })}
                                          onSubmit={values => {
                                            const updatePaymentOutCreatedStatuss =
                                            {
                                              id: paymentCreatedStatus.id,
                                              deposit_copy: values.deposit_copy,

                                              amount: values.amount,
                                              payment_method: values.payment_method,
                                              payment_at: values.payment_at,
                                              cheque_no: values.cheque_no,

                                              comments:
                                                values.comments,

                                            };

                                            // update PaymentStatus
                                            onUpdatePaymentOutCreatedStatuss(
                                              updatePaymentOutCreatedStatuss
                                            );
                                            setTimeout(() => {
                                              onGetCreatedOutStatuss(
                                                this.state.user_id
                                              );
                                            }, 1000);
                                            this.toggle();
                                          }}
                                        >
                                          {({ errors, status, touched }) => (
                                            <Form>
                                              <Row>
                                                <Col className="col-12">
                                                  <Field
                                                    type="hidden"
                                                    className="form-control"
                                                    name="hiddenEditFlag"
                                                    value={isEdit}
                                                  />
                                                  {/* payments out pending clearence field */}

                                                  <div>

                                                    <div className="mb-3">
                            <Label htmlFor="cardnumberInput">
                              Payment For
                              <span
                                style={{ color: "#f46a6a" }}
                                className="font-size-18"
                              >
                                *
                              </span>
                            </Label>
                            <select
                              name="payment_for"
                              component="select"
                              onChange={e =>
                                this.setState({
                                  payment_for: e.target.value,
                                })
                              }
                              value={this.state.payment_for}
                              className="form-select"
                            >
                              <option
                                value=""
                              >
                                --- Please select the Type
                                ---
                              </option>
                              <option value="Lab">Lab</option>
                              <option value="B2BClient">B2b</option>
                            </select>

                          </div>
                          

                          {this.state.payment_for == "Lab" ? (
                            paymentCreatedStatus.lab_id ? (
                              <div className="mb-3">
                                <Label className="form-label">
                                  Lab name
                                </Label>
                                <Field
                                  name="lab_id"
                                  as="select"
                                  defaultValue={
                                    paymentCreatedStatus.lab_id
                                  }
                                  className="form-select"
                                  readOnly={true}
                                  multiple={false}
                                >
                                  <option
                                    key={
                                      paymentCreatedStatus.lab_id
                                    }
                                    value={
                                      paymentCreatedStatus.lab_id
                                    }
                                  >
                                    {
                                      paymentCreatedStatus.lab_name
                                    }
                                  </option>
                                </Field>
                              </div>
                            ) : (
                              <div className="mb-3 select2-container">
                                <Label>Lab Name</Label>
                                <Select
                                  name="lab_id"
                                  component="Select"
                                  onChange={selectedGroup =>
                                    this.setState({
                                      lab_id:
                                        selectedGroup.value,
                                    })
                                  }
                                  defaultValue={this.state.lab_id}

                                  className={
                                    "defautSelectParent" +
                                    (!this.state.lab_id
                                      ? " is-invalid"
                                      : "")
                                  }
                                  styles={{
                                    control: (
                                      base,
                                      state
                                    ) => ({
                                      ...base,
                                      borderColor: !this
                                        .state.lab_id
                                        ? "#f46a6a"
                                        : "#ced4da",
                                    }),
                                  }}
                                  options={labList}
                                  placeholder="Select Lab..."
                                />

                                <div className="invalid-feedback">
                                  Please select your Lab
                                </div>
                              </div>)
                          ) : null} 

                                                     {this.state.payment_for == "B2BClient" ? (
                            paymentCreatedStatus.b2b_id ? (
                              <div className="mb-3">
                                <Label className="form-label">
                                  B2BClient name
                                </Label>
                                <Field
                                  name="b2b_id"
                                  as="select"
                                  defaultValue={
                                    paymentCreatedStatus.b2b_id
                                  }
                                  className="form-control"
                                  readOnly={true}
                                  multiple={false}
                                >
                                  <option
                                    key={
                                      paymentCreatedStatus.b2b_id
                                    }
                                    value={
                                      paymentCreatedStatus.b2b_id
                                    }
                                  >
                                    {
                                      paymentCreatedStatus.donor_name
                                    }
                                  </option>
                                </Field>
                              </div>
                            ) : (
                              <div className="mb-3 select2-container">
                                <Label>B2BClient Name</Label>
                                <Select
                                  name="b2b_id"
                                  component="Select"
                                  onChange={selectedGroup =>
                                    this.setState({
                                      b2b_id:
                                        selectedGroup.value,
                                    })
                                  }
                                  className={
                                    "defautSelectParent" +
                                    (!this.state.b2b_id
                                      ? " is-invalid"
                                      : "")
                                  }
                                  styles={{
                                    control: (
                                      base,
                                      state
                                    ) => ({
                                      ...base,
                                      borderColor: !this
                                        .state.b2b_id
                                        ? "#f46a6a"
                                        : "#ced4da",
                                    }),
                                  }}
                                  options={b2bList}
                                  placeholder="Select Donor..."
                                />

                                <div className="invalid-feedback">
                                  Please select B2BClient
                                </div>
                              </div>
                            )

                          ) : null}

                                                     {/* <FormGroup className="mb-0">
                            <Label htmlFor="cardnumberInput">
                              Amount
                              <span
                                style={{ color: "#f46a6a" }}
                                className="font-size-18"
                              >
                                *
                              </span>
                            </Label>
                            <Input
                              type="number"
                              className="form-control"
                              id="cardnumberInput"
                              placeholder="Enter Amount"
                              name="amount"
                              onChange={e =>
                                this.setState({
                                  amount: e.target.value,
                                })
                              }
                            />
                          </FormGroup> */}
                                                    <div className="mb-3">
                                                      <Label className="form-label">
                                                        Amount
                                                      </Label>
                                                      <Field
                                                        name="amount"
                                                        type="number"
                                                        value={
                                                          this.state
                                                            .paymentCreatedStatus.amount
                                                        }
                                                        onChange={e => {
                                                          this.setState({
                                                            paymentCreatedStatus: {
                                                              id: paymentCreatedStatus.id,
                                                              lab_id:
                                                                paymentCreatedStatus.lab_id,
                                                              b2b_id:
                                                                paymentCreatedStatus.b2b_id,
                                                              invoice_id:
                                                                paymentCreatedStatus.invoice_id,
                                                              amount:
                                                                e.target
                                                                  .value,

                                                              payment_method:
                                                                paymentCreatedStatus.payment_method,
                                                              payment_for:
                                                                paymentCreatedStatus.payment_for,
                                                              payment_at:
                                                                paymentCreatedStatus.payment_at,
                                                              cheque_no: paymentCreatedStatus.cheque_no,
                                                              bank_id:
                                                                paymentCreatedStatus.bank_id,
                                                              deposit_copy:
                                                                paymentCreatedStatus.deposit_copy,
                                                              is_cleared:
                                                                paymentCreatedStatus.is_cleared,
                                                              cleared_at: paymentCreatedStatus.cleared_at,
                                                              bankaccount_id:
                                                                paymentCreatedStatus.bankaccount_id,
                                                              status: paymentCreatedStatus.status,
                                                              comments:
                                                                paymentCreatedStatus.comments,

                                                            },
                                                          });
                                                        }}
                                                        className={
                                                          "form-control" +
                                                          (errors.amount &&
                                                            touched.amount
                                                            ? " is-invalid"
                                                            : "")
                                                        }
                                                      />
                                                      <ErrorMessage
                                                        name="amount"
                                                        component="div"
                                                        className="invalid-feedback"
                                                      />
                                                    </div>
                                                    {/* 
                          <FormGroup className="mt-4 mb-0">
                            <Label htmlFor="cardnameInput">
                              Cheque/TT #
                              <span
                                style={{ color: "#f46a6a" }}
                              // className="font-size-18"
                              >
                                *
                              </span>
                            </Label>
                            <Input
                              type="text"
                              className="form-control"
                              id="cardnumberInput"
                              placeholder="0000 0000 0000 0000"
                              name="cheque_no"
                              onChange={e =>
                                this.setState({
                                  cheque_no: e.target.value,
                                })
                              }
                            />
                          </FormGroup> */}

                                                    <div className="mb-3">
                                                      <Label className="form-label">
                                                        Cheque/ Online Ref#
                                                      </Label>
                                                      <Field
                                                        name="cheque_no"
                                                        type="text"
                                                        value={
                                                          this.state
                                                            .paymentCreatedStatus.cheque_no
                                                        }
                                                        onChange={e => {
                                                          this.setState({
                                                            paymentCreatedStatus: {
                                                              id: paymentCreatedStatus.id,
                                                              lab_id:
                                                                paymentCreatedStatus.lab_id,
                                                              b2b_id:
                                                                paymentCreatedStatus.b2b_id,
                                                              invoice_id:
                                                                paymentCreatedStatus.invoice_id,
                                                              cheque_no:
                                                                e.target
                                                                  .value,

                                                              payment_method:
                                                                paymentCreatedStatus.payment_method,
                                                              amount:
                                                                paymentCreatedStatus.amount,
                                                              payment_at:
                                                                paymentCreatedStatus.payment_at,
                                                              payment_for: paymentCreatedStatus.payment_for,
                                                              bank_id:
                                                                paymentCreatedStatus.bank_id,
                                                              deposit_copy:
                                                                paymentCreatedStatus.deposit_copy,
                                                              is_cleared:
                                                                paymentCreatedStatus.is_cleared,
                                                              cleared_at: paymentCreatedStatus.cleared_at,
                                                              bankaccount_id:
                                                                paymentCreatedStatus.bankaccount_id,
                                                              status: paymentCreatedStatus.status,
                                                              comments:
                                                                paymentCreatedStatus.comments,

                                                            },
                                                          });
                                                        }}
                                                        className={
                                                          "form-control" +
                                                          (errors.cheque_no &&
                                                            touched.cheque_no
                                                            ? " is-invalid"
                                                            : "")
                                                        }
                                                      />
                                                      <ErrorMessage
                                                        name="cheque_no"
                                                        component="div"
                                                        className="invalid-feedback"
                                                      />
                                                    </div>

                                                    <FormGroup className="mb-0">
                                                      <Label htmlFor="cardnumberInput">
                                                        Payment Date
                                                        <span
                                                          style={{ color: "#f46a6a" }}
                                                          className="font-size-18"
                                                        >
                                                          *
                                                        </span>
                                                      </Label>
                                                      <input
                                                        name="payment_at"
                                                        type="datetime-local"
                                                        value={
                                                          this.state
                                                            .paymentCreatedStatus.payment_at
                                                        }
                                                        onChange={e => {
                                                          this.setState({
                                                            paymentCreatedStatus: {
                                                              id: paymentCreatedStatus.id,
                                                              lab_id:
                                                                paymentCreatedStatus.lab_id,
                                                              b2b_id:
                                                                paymentCreatedStatus.b2b_id,
                                                              invoice_id:
                                                                paymentCreatedStatus.invoice_id,
                                                              payment_at:
                                                                e.target
                                                                  .value,

                                                              payment_method:
                                                                paymentCreatedStatus.payment_method,
                                                              amount:
                                                                paymentCreatedStatus.amount,
                                                              cheque_no:
                                                                paymentCreatedStatus.cheque_no,
                                                              payment_for: paymentCreatedStatus.payment_for,
                                                              bank_id:
                                                                paymentCreatedStatus.bank_id,
                                                              deposit_copy:
                                                                paymentCreatedStatus.deposit_copy,
                                                              is_cleared:
                                                                paymentCreatedStatus.is_cleared,
                                                              cleared_at: paymentCreatedStatus.cleared_at,
                                                              bankaccount_id:
                                                                paymentCreatedStatus.bankaccount_id,
                                                              status: paymentCreatedStatus.status,
                                                              comments:
                                                                paymentCreatedStatus.comments,

                                                            },
                                                          });
                                                        }}
                                                        min={new Date(
                                                          new Date().toString().split("GMT")[0] +
                                                          " UTC"
                                                        )
                                                          .toISOString()
                                                          .slice(0, -8)}
                                                        className="form-control"
                                                      // onChange={e =>
                                                      //   this.setState({
                                                      //     payment_at:
                                                      //       e.target.value,
                                                      //   })
                                                      // }
                                                      />
                                                    </FormGroup>

                                                    {/* {paymentCreatedStatus.bank_id &&
                            paymentCreatedStatus.bank_id ? (
                            <div className="mb-3">
                              <Label
                                className="col-form-label"
                              >
                                Bank Name</Label>

                              <Field
                                name="bank_id"
                                as="select"
                                defaultValue={
                                  paymentCreatedStatus.bank_id
                                }
                                className="form-control"
                                readOnly={true}
                                multiple={false}
                              >
                                <option
                                  key={
                                    paymentCreatedStatus.bank_id
                                  }
                                  value={
                                    paymentCreatedStatus.bank_id
                                  }
                                >
                                  {
                                    paymentCreatedStatus.bank_name
                                  }
                                </option>
                              </Field>
                            </div>
                          ) : (
                            <div className="mb-3 select2-container">
                              <Label
                                className="col-form-label"
                              >
                                Bank Name</Label>

                              <Select
                                name="bank_id"
                                component="Select"
                                onChange={selectedGroup =>
                                  this.setState({
                                    bank_id:
                                      selectedGroup.value,
                                  })
                                }
                                className={
                                  "defautSelectParent" +
                                  (!this.state.bank_id
                                    ? " is-invalid"
                                    : "")
                                }
                                styles={{
                                  control: (
                                    base,
                                    state
                                  ) => ({
                                    ...base,
                                    borderColor: !this
                                      .state.bank_id
                                      ? "#f46a6a"
                                      : "#ced4da",
                                  }),
                                }}
                                options={bankList}
                                placeholder="Select Bank..."
                              />
                              <div className="invalid-feedback">
                                Please select your Bank
                              </div>
                            </div>
                              )}*/}

                          {paymentCreatedStatus.bankaccount_id &&
                            paymentCreatedStatus.bankaccount_id ? (
                            <div className="mb-3">
                              <Label
                                className="col-form-label"
                              >
                                Bank Account Name</Label>

                              <Field
                                name="bankaccount_id"
                                as="select"
                                defaultValue={
                                  paymentCreatedStatus.bankaccount_id
                                }
                                className="form-control"
                                readOnly={true}
                                multiple={false}
                              >
                                <option
                                  key={
                                    paymentCreatedStatus.bankaccount_id
                                  }
                                  value={
                                    paymentCreatedStatus.bankaccount_id
                                  }
                                >
                                  {
                                    paymentCreatedStatus.account_no

                                  }
                                </option>
                              </Field>
                            </div>
                          ) : (
                            <div className="mb-3 select2-container">
                              <Label
                                className="col-form-label"
                              >
                                Bank Account Name</Label>

                              <Select
                                name="bankaccount_id"
                                component="Select"
                                onChange={selectedGroup =>
                                  this.setState({
                                    bankaccount_id:
                                      selectedGroup.value,
                                  })
                                }
                                className={
                                  "defautSelectParent" +
                                  (!this.state.bankaccount_id
                                    ? " is-invalid"
                                    : "")
                                }
                                styles={{
                                  control: (
                                    base,
                                    state
                                  ) => ({
                                    ...base,
                                    borderColor: !this
                                      .state.bankaccount_id
                                      ? "#f46a6a"
                                      : "#ced4da",
                                  }),
                                }}
                                options={bankaccountList}
                                placeholder="Select Bank Account..."
                              />
                              <div className="invalid-feedback">
                                Please select your Bank Account
                              </div>
                            </div>
                          )}
                                                    {/* 
                          <FormGroup className=" mt-4 mb-0">
                            <Label htmlFor="expirydateInput">
                              Payment Copy
                              <span
                                style={{ color: "#f46a6a" }}
                                className="font-size-18"
                              >
                                *
                              </span>
                            </Label>
                            <Input
                              id="formFile"
                              name="deposit_copy"
                              type="file"
                              multiple={false}
                              accept=".jpg,.jpeg,.png,.pdf"
                              onChange={e => {
                                this.setState({
                                  deposit_copy:
                                    e.target.files[0],
                                });
                              }}
                              // className="form-control is-invalid"
                              // className={
                              //   "form-control" +
                              //   (this.state.deposit_copy.length >
                              //     0 && !this.state.deposit_copy
                              //     ? " is-invalid"
                              //     : "")
                              // }
                            />
                          </FormGroup> */}
                                                    <div className="mb-3">
                                                      <Label
                                                        for="name"
                                                        className="form-label"
                                                      >
                                                        Payment Copy
                                                      </Label>
                                                      <Input
                                                        id="formFile"
                                                        name="deposit_copy"
                                                        placeholder="Choose image"
                                                        type="file"
                                                        multiple={false}
                                                        accept=".jpg,.jpeg,.png,.pdf"
                                                        onChange={e =>
                                                          this.setState({
                                                            collectorImg:
                                                              e.target.files[0],
                                                          })
                                                        }
                                                        className={
                                                          "form-control" +
                                                          (errors.deposit_copy &&
                                                            touched.deposit_copy
                                                            ? " is-invalid"
                                                            : "")
                                                        }
                                                      />

                                                      <ErrorMessage
                                                        name="deposit_copy"
                                                        component="div"
                                                        className="invalid-feedback"
                                                      />
                                                    </div>

                                                    {/* <FormGroup className="mb-0">
                            <Label htmlFor="cardnumberInput">
                              Payment Method
                              <span
                                style={{ color: "#f46a6a" }}
                                className="font-size-18"
                              >
                                *
                              </span>
                            </Label>
                            <select
                              name="payment_method"
                              component="select"
                              onChange={e =>
                                this.setState({
                                  payment_method: e.target.value,
                                })
                              }
                              defaultValue={this.state.payment_method}
                              className="form-select"
                            >
                              <option
                                value=""
                              >
                                --- Please select the Payment Type
                                ---
                              </option>
                              <option value="Cheque">Cheque</option>
                              <option value="Card">Online</option>

                            </select>
                          </FormGroup> */}
                                                    <div className="mb-3">
                                                      <Label className="form-label">
                                                        Payment Type
                                                      </Label>
                                                      <Field
                                                        name="payment_method"
                                                        as="select"
                                                        value={
                                                          paymentCreatedStatus.payment_method
                                                        }
                                                        onChange={e => {
                                                          this.setState({
                                                            paymentCreatedStatus: {
                                                              id: paymentCreatedStatus.id,
                                                              payment_method:
                                                                e.target
                                                                  .value,
                                                              amount:
                                                                paymentCreatedStatus.amount,
                                                              payment_at:
                                                                paymentCreatedStatus.payment_at,
                                                              cheque_no: paymentCreatedStatus.cheque_no,
                                                              deposit_copy:
                                                                paymentCreatedStatus.deposit_copy,
                                                              comments:
                                                                paymentCreatedStatus.comments,

                                                            },
                                                          });
                                                        }}
                                                        className="form-control"
                                                        readOnly={false}
                                                        multiple={false}
                                                      >
                                                        <option
                                                          value=""
                                                        >
                                                          --- Please select the Payment Type
                                                          ---
                                                        </option>
                                                        <option value="Cheque">
                                                          Cheque
                                                        </option>
                                                        <option value="Card">
                                                          Online
                                                        </option>

                                                      </Field>
                                                    </div>
                                                    {/* 
                          <div className="mb-3">
                                                    <Label className="form-label">
                                                      Payment Type
                                                    </Label>
                                                    <Field
                                                      name="payment_method"
                                                      as="select"
                                                      value={
                                                        paymentCreatedStatus.payment_method
                                                      }
                                                      onChange={e => {
                                                        this.setState({
                                                          paymentCreatedStatus: {
                                                            id: paymentCreatedStatus.id,
                                                            lab_id:
                                                              paymentCreatedStatus.lab_id,
                                                            b2b_id:
                                                              paymentCreatedStatus.b2b_id,
                                                            invoice_id:
                                                              paymentCreatedStatus.invoice_id,
                                                            payment_method:
                                                            e.target
                                                            .value,
                                                            
                                                            payment_for:
                                                              paymentCreatedStatus.payment_for,
                                                            amount:
                                                              paymentCreatedStatus.amount,
                                                            payment_at:
                                                              paymentCreatedStatus.payment_at,
                                                            cheque_no: paymentCreatedStatus.cheque_no,
                                                            bank_id:
                                                            paymentCreatedStatus.bank_id,
                                                          deposit_copy:
                                                            paymentCreatedStatus.deposit_copy,
                                                          is_cleared:
                                                            paymentCreatedStatus.is_cleared,
                                                          cleared_at: paymentCreatedStatus.cleared_at,
                                                            bankaccount_id:
                                                              paymentCreatedStatus.bankaccount_id,
                                                              status: paymentCreatedStatus.status,
                                                              comments:
                                                                paymentCreatedStatus.comments,
                                                          
                                                          },
                                                        });
                                                      }}
                                                      className="form-control"
                                                      readOnly={false}
                                                      multiple={false}
                                                    >
                                                      <option
                                value=""
                              >
                                --- Please select the Payment Type
                                ---
                              </option>
                                                      <option value="Cheque">
                                                        Cheque
                                                      </option>
                                                      <option value="Card">
                                                        Online
                                                      </option>
                                                    
                                                    </Field>
                                                  </div> */}

                                                    {/* <FormGroup className="mb-0">
                            <Label htmlFor="cardnumberInput">
                              Is Cleared
                              <span
                                style={{ color: "#f46a6a" }}
                                className="font-size-18"
                              >
                                *
                              </span>
                            </Label>
                            <select
                              name="is_cleared"
                              component="select"
                              onChange={e =>
                                this.setState({
                                  is_cleared: e.target.value,
                                })
                              }
                              defaultValue={this.state.is_cleared}
                              className="form-select"
                            >
                              <option
                                value=""
                              >
                                --- Please select the Type
                                ---
                              </option>
                              <option value="Yes">Yes</option>
                              <option value="No">No</option>

                            </select>
                          </FormGroup> */}

                                                    <FormGroup className="mb-0">
                                                      <Label htmlFor="cardnumberInput">
                                                        Comments
                                                        <span
                                                          style={{ color: "#f46a6a" }}
                                                          className="font-size-18"
                                                        >
                                                          *
                                                        </span>
                                                      </Label>
                                                      <Input
                                                        type="text"
                                                        className="form-control"
                                                        id="cardnumberInput"
                                                        placeholder="Enter Comments"
                                                        name="comments"
                                                        onChange={e =>
                                                          this.setState({
                                                            comments: e.target.value,
                                                          })
                                                        }
                                                      />
                                                    </FormGroup>

                                                    <Row className="mt-4">
                                                      {/* 
                            <Col sm="6">
                              <div className="text-end">
                                <button
                                  component={Link}
                                  onClick={this.handleProceedClick}
                                  to="/dashboard-financeofficer"
                                  className="btn btn-success mb-4"
                                >
                                  <i className="mdi mdi-truck-fast me-1" /> Save{" "}
                                </button>
                              </div>
                            </Col> */}
                                                      <Col sm="6">
                                                        <button
                                                          to="/dashboard-financeofficer"
                                                          className="btn btn-danger"
                                                          onClick={this.handleProceedClicks}
                                                        // disabled={this.state.carts.length == 0}
                                                        >
                                                          <i className="mdi mdi-truck-fast me-1" />
                                                          submit
                                                        </button>
                                                      </Col>
                                                    </Row>

                                                  </div>

                                                </Col>
                                              </Row>
                                              <Row>
                                                <Col>
                                                  <div className="text-end">
                                                    <button
                                                      type="submit"
                                                      className="btn btn-success save-user"
                                                    >
                                                      Save
                                                    </button>
                                                  </div>
                                                </Col>
                                              </Row>
                                            </Form>
                                          )}
                                        </Formik>
                                      </ModalBody>
                                    </Modal>
                                  </div>
                                </Col>
                              </Row>
                              <Row className="align-items-md-center mt-30">
                                <Col className="pagination pagination-rounded justify-content-end mb-2">
                                  <PaginationListStandalone
                                    {...paginationProps}
                                  />
                                </Col>
                              </Row>
                            </React.Fragment>
                          )}
                        </ToolkitProvider>
                      )}
                    </PaginationProvider>
                  </CardBody>
                </Card>
              </Col>
            </Row>
          </Container>
        </div>
      </React.Fragment>
    );
  }
}

paymentCreatedList.propTypes = {
  match: PropTypes.object,
  labs: PropTypes.array,
  paymentCreatedStatuss: PropTypes.array,
  className: PropTypes.any,
  bankAccounts: PropTypes.array,
  onAddNewOutPayment: PropTypes.func,
  onGetCreatedOutStatuss: PropTypes.func,
  onUpdatePaymentOutCreatedStatuss: PropTypes.func,
  onGetlabs: PropTypes.func,
  onGetbankAccounts: PropTypes.func,


};

const mapStateToProps = ({ paymentStatuss }) => ({
  paymentCreatedStatuss: paymentStatuss.paymentCreatedStatuss,
  labs: paymentStatuss.labs,
  bankAccounts: paymentStatuss.bankAccounts,
});

const mapDispatchToProps = (dispatch, ownProps) => ({
  onGetlabs: () => dispatch(getLabs()),
  onGetbankAccounts: () => dispatch(getBankAccounts()),
  onGetCreatedOutStatuss: id => dispatch(getCreatedOutStatuss(id)),
  onUpdatePaymentOutCreatedStatuss: paymentOutCreatedStatuss =>
    dispatch(updatePaymentOutCreatedStatuss(paymentOutCreatedStatuss)),
  onAddNewOutPayment: (outPayment, id) =>
    dispatch(addNewOutPayment(outPayment, id)),
});

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(withRouter(paymentCreatedList));
      



















onChange={e => {
    this.setState({
      paymentCreatedStatus: {
        id: paymentCreatedStatus.id,
        lab_id:
          paymentCreatedStatus.lab_id,
        b2b_id:
          paymentCreatedStatus.b2b_id,
        invoice_id:
          paymentCreatedStatus.invoice_id,
        payment_for:
        e.target
        .value,
        
        payment_method:
          paymentCreatedStatus.payment_method,
        amount:
          paymentCreatedStatus.amount,
        payment_at:
          paymentCreatedStatus.payment_at,
        cheque_no: paymentCreatedStatus.cheque_no,
        bank_id:
        paymentCreatedStatus.bank_id,
      deposit_copy:
        paymentCreatedStatus.deposit_copy,
      is_cleared:
        paymentCreatedStatus.is_cleared,
      cleared_at: paymentCreatedStatus.cleared_at,
        bankaccount_id:
          paymentCreatedStatus.bankaccount_id,
          status: paymentCreatedStatus.status,
          comments:
            paymentCreatedStatus.comments,
      
      },
    });
  }}
